# Table of Contents
# 1. Help and Discovery
# 2. File System and Navigation
# 3. File Manipulation
# 4. Process Management
# 5. Networking
# 6. Variables
# 7. Input and Output
# 8. Loops and Conditionals
# 9. Functions
# 10. Error Handling
# 11. Scripting Best Practices
# 12. Regular Expressions
# 13. Permissions and Ownership
# 14. Compression and Archiving
# 15. System Information
# 16. Package Management
# 17. Parameter Definitions and Attributes
# 18. Remote Commands
###########################################################################
#region Help and Discovery
# Commands to explore and discover shell commands and their usage.

# Universal commands
man <command>
    # Displays the manual page for a command.
    # Example: man ls

<command> --help
    # Displays a brief help message for a command.
    # Example: ls --help

apropos <keyword>
    # Searches the manual pages for a keyword.
    # Example: apropos network

which <command>
    # Shows the full path of a command.
    # Example: which bash

type <command>
    # Displays information about a command (e.g., alias, function, or binary).
    # Example: type ls

whatis <command>
    # Displays a one-line description of a command.
    # Example: whatis ls

# Zsh-specific commands
autoload -Uz run-help
    # Enables the `run-help` command for enhanced help in Zsh.
    # Example: run-help cd

whence <command>
    # Displays information about a command (similar to `type` in Bash).
    # Example: whence ls
#endregion

#region File System and Navigation
# Commands to navigate and manage the file system.

# Universal commands
pwd
    # Prints the current working directory.

ls
    # Lists files and directories.
    # Example: ls -l

cd <directory>
    # Changes the current directory.
    # Example: cd /home/user

mkdir <directory>
    # Creates a new directory.
    # Example: mkdir my_folder

rmdir <directory>
    # Removes an empty directory.
    # Example: rmdir my_folder

rm <file>
    # Deletes a file or directory (use `-r` for directories).
    # Example: rm -r my_folder

cp <source> <destination>
    # Copies files or directories.
    # Example: cp file.txt /tmp/

mv <source> <destination>
    # Moves or renames files or directories.
    # Example: mv file.txt new_file.txt

find <path> -name <pattern>
    # Searches for files or directories.
    # Example: find /home -name "*.txt"
#endregion

#region File Manipulation
# Commands to view and manipulate file contents.

# Universal commands
cat <file>
    # Displays the contents of a file.
    # Example: cat file.txt

less <file>
    # Views a file one screen at a time.
    # Example: less file.txt

head <file>
    # Displays the first 10 lines of a file.
    # Example: head file.txt

tail <file>
    # Displays the last 10 lines of a file.
    # Example: tail file.txt

touch <file>
    # Creates an empty file or updates the timestamp of an existing file.
    # Example: touch new_file.txt

echo <text> > <file>
    # Writes text to a file (overwrites).
    # Example: echo "Hello, World!" > file.txt

echo <text> >> <file>
    # Appends text to a file.
    # Example: echo "Hello again!" >> file.txt
#endregion

#region Process Management
# Commands to manage processes.

# Universal commands
ps
    # Displays information about running processes.
    # Example: ps aux

top
    # Displays real-time system resource usage.

kill <PID>
    # Terminates a process by its PID.
    # Example: kill 1234

killall <name>
    # Terminates all processes with a specific name.
    # Example: killall firefox

jobs
    # Lists background jobs in the current shell.

fg <job>
    # Brings a background job to the foreground.
    # Example: fg %1

bg <job>
    # Resumes a background job.
    # Example: bg %1
#endregion

#region Networking
# Commands for network-related tasks.

# Universal commands
ping <host>
    # Tests connectivity to a host.
    # Example: ping google.com

curl <url>
    # Fetches data from a URL.
    # Example: curl https://example.com

wget <url>
    # Downloads files from a URL.
    # Example: wget https://example.com/file.txt

ifconfig
    # Displays network interface information.

netstat -tuln
    # Displays active network connections.
#endregion

#region Variables
# Working with variables in the shell.

# Universal commands
VARIABLE=value
    # Assigns a value to a variable.
    # Example: NAME="John"

echo $VARIABLE
    # Displays the value of a variable.
    # Example: echo $NAME

export VARIABLE
    # Makes a variable available to child processes.
    # Example: export PATH=$PATH:/new/path

unset VARIABLE
    # Removes a variable.
    # Example: unset NAME

# Zsh-specific commands
typeset VARIABLE=value
    # Declares a variable (similar to `declare` in Bash).
    # Example: typeset NAME="John"

setopt <option>
    # Enables a shell option.
    # Example: setopt NO_CASE_GLOB

unsetopt <option>
    # Disables a shell option.
    # Example: unsetopt NO_CASE_GLOB
#endregion

#region Input and Output
# Redirecting input and output.

# Universal commands
<command> > <file>
    # Redirects output to a file (overwrites).
    # Example: ls > output.txt

<command> >> <file>
    # Redirects output to a file (appends).
    # Example: ls >> output.txt

<command> 2> <file>
    # Redirects error output to a file.
    # Example: ls non_existent_file 2> error.txt

<command> &> <file>
    # Redirects both standard and error output to a file.
    # Example: ls &> output.txt

<command> | <command>
    # Pipes the output of one command to another.
    # Example: ls | grep "file"

# Prompting user input and displaying formatted output.
read -p "Enter your name: " name
    # Prompts the user for input and stores it in the variable `name`.
    # Example: Enter your name: John

echo "Hello, $name!"
    # Displays the entered name.
    # Example: Hello, John!

printf "Name: %s, Age: %d\n" "John" 25
    # Formats and displays output.
    # Example: Name: John, Age: 25
#endregion

#region Loops and Conditionals
# Control structures in shell scripts.

# Universal commands
if [ <condition> ]; then
    # Code to execute if condition is true
elif [ <another_condition> ]; then
    # Code to execute if another condition is true
else
    # Code to execute if all conditions are false
fi

for var in <list>; do
    # Code to execute for each item in the list
done

while [ <condition> ]; do
    # Code to execute while condition is true
done

case $variable in
    "value1")
        echo "Matched value1"
        ;;
    "value2")
        echo "Matched value2"
        ;;
    *)
        echo "Default case"
        ;;
esac
    # Matches a variable against multiple patterns.

# Bash-specific commands
for ((i=1; i<=5; i++)); do
    echo "Iteration $i"
done
    # C-style for loop.

# Zsh-specific commands
for var ({1..5}); do
    # Zsh supports brace expansion directly in loops.
    echo "Iteration $var"
done

[[ <condition> ]]
    # Preferred syntax for conditionals in Zsh.
    # Example: if [[ $var -eq 1 ]]; then
#endregion

#region Functions
# Defining and using functions in shell scripts.

# Universal commands
function_name() {
    # Code for the function
    echo "This is a basic function."
}

# Example usage:
function_name  # Output: This is a basic function.

# Zsh-specific commands
autoload -Uz my_function
    # Loads a function only when it is called.
#endregion

#region Error Handling
# Handling errors in shell scripts.

# Universal commands
set -e
    # Exits the script if any command fails.

trap '<command>' ERR
    # Executes a command when an error occurs.
    # Example: trap 'echo "An error occurred!"' ERR

if [ $? -ne 0 ]; then
    echo "The last command failed."
fi
    # Checks the exit status of the last command.

# Zsh-specific commands
set -o ERR_EXIT
    # Exits the script if any command fails (similar to `set -e` in Bash).
#endregion

#region Scripting Best Practices
# Tips for writing clean and efficient shell scripts.

# Universal tips
- Use meaningful variable and function names.
- Add comments to explain complex logic.
- Use `set -e` to stop execution on errors.
- Validate input using conditionals.
- Modularize code into functions for reusability.
#endregion

#region Regular Expressions
# Commands and tools for working with regular expressions.

# Universal commands
grep <pattern> <file>
    # Searches for lines matching a pattern in a file.
    # Example: grep "error" log.txt

egrep <pattern> <file>
    # Extended grep for more complex patterns.
    # Example: egrep "error|warning" log.txt

sed 's/<pattern>/<replacement>/g' <file>
    # Stream editor for searching and replacing text.
    # Example: sed 's/foo/bar/g' file.txt

awk '/<pattern>/ {action}' <file>
    # Pattern scanning and processing language.
    # Example: awk '/error/ {print $0}' log.txt

# Zsh-specific commands
grep -E <pattern> <file>
    # Use `-E` for extended regex (equivalent to `egrep` in Bash).
    # Example: grep -E "error|warning" log.txt
#endregion

#region Permissions and Ownership
# Commands to manage file and directory permissions and ownership.

# Universal commands
chmod <permissions> <file>
    # Changes the permissions of a file or directory.
    # Example: chmod 755 script.sh

chown <owner>:<group> <file>
    # Changes the ownership of a file or directory.
    # Example: chown user:group file.txt

ls -l
    # Lists files with their permissions.
    # Example: ls -l /path/to/directory
#endregion

#region Compression and Archiving
# Commands to compress and extract files.

# Universal commands
tar -cvf <archive.tar> <files>
    # Creates a tar archive.
    # Example: tar -cvf archive.tar file1 file2

tar -xvf <archive.tar>
    # Extracts a tar archive.
    # Example: tar -xvf archive.tar

gzip <file>
    # Compresses a file using gzip.
    # Example: gzip file.txt

gunzip <file.gz>
    # Decompresses a gzip file.
    # Example: gunzip file.txt.gz
#endregion

#region System Information
# Commands to retrieve system and hardware information.

# Universal commands
uname -a
    # Displays system information.
    # Example: uname -a

df -h
    # Displays disk space usage.
    # Example: df -h

free -m
    # Displays memory usage.
    # Example: free -m

uptime
    # Displays system uptime.
    # Example: uptime
#endregion

#region Package Management
# Commands to manage software packages.

# Universal commands
apt-get update
    # Updates the package list (Debian-based systems).
    # Example: sudo apt-get update

apt-get install <package>
    # Installs a package (Debian-based systems).
    # Example: sudo apt-get install curl
#endregion

#region Parameter Definitions and Attributes
# Handling script arguments in Bash.

# Universal commands
echo "Script name: $0"
    # Displays the name of the script.
    # Example: ./script.sh

echo "First argument: $1"
    # Displays the first argument passed to the script.
    # Example: ./script.sh arg1

echo "All arguments: $@"
    # Displays all arguments passed to the script.
    # Example: ./script.sh arg1 arg2

echo "Number of arguments: $#"
    # Displays the number of arguments passed to the script.
    # Example: ./script.sh arg1 arg2

# Using a loop to process all arguments.
for arg in "$@"; do
    echo "Argument: $arg"
done

# Shift command to process arguments one by one.
while [ $# -gt 0 ]; do
    echo "Processing argument: $1"
    shift
done

# Default values for parameters.
name=${1:-"DefaultName"}
    # Uses the first argument if provided, otherwise defaults to "DefaultName".
    # Example: ./script.sh John -> name="John"
    # Example: ./script.sh -> name="DefaultName"

# Checking for required arguments.
if [ $# -lt 1 ]; then
    echo "Usage: $0 <required_argument>"
    exit 1
fi

# Using getopts for parsing options and flags.
while getopts "a:b:c" opt; do
    case $opt in
        a) echo "Option -a with value $OPTARG";;
        b) echo "Option -b with value $OPTARG";;
        c) echo "Option -c (no value)";;
        *) echo "Invalid option"; exit 1;;
    esac
done

# Zsh-specific commands
echo "All arguments: $*"
    # `$*` expands all arguments as a single string (Zsh-specific behavior).

echo "All arguments (individually): $@"
    # `$@` expands all arguments as separate strings.

# Zsh supports named parameters with attributes.
typeset -i num=42
    # Declares `num` as an integer.
    # Example: echo $((num + 1)) -> 43
#endregion

#region Remote Commands
# Executing commands on remote systems using SSH.

# Universal commands
ssh user@remote_host "ls -l /path/to/directory"
    # Executes a command on a remote host via SSH.

scp file.txt user@remote_host:/path/to/destination
    # Copies a file to a remote host via SCP.

rsync -avz /local/path user@remote_host:/remote/path
    # Synchronizes files between local and remote systems.

# Zsh-specific commands
zmodload zsh/net/tcp
    # Loads the Zsh TCP module for advanced networking.
    # Example: ztcp google.com 80
#endregion